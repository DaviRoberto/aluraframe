{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAwB;AAAA;;AAEpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAY;AAAA;;AAEjB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,wBAAQI,SAAR,GAAoB,aAAI;;AAEpBN;AAEH,iBAJD;;AAMAE,wBAAQK,OAAR,GAAkB,aAAI;;AAElBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,0CAAP;AACH,iBAJD;AAMH,aAnBM,CAAP;AAoBH;;;qCAEY;AAAA;;AAET,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,aAAD,CADJ,EACqB,WADrB,EAERC,WAFQ,CAEI,aAFJ,EAGRU,UAHQ,EAAb;;AAKA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOP,SAAP,GAAmB,aAAK;;AAEpB,wBAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,wBAAGD,KAAH,EAAS;;AAEL,4BAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;;AAEAR,8BAAMS,QAAN;AAEH,qBARD,MAQO;;AAEHzB,gCAAQe,WAAR;AACH;;AAEDF,2BAAON,OAAP,GAAiB,aAAK;;AAElBC,gCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,+BAAO,yCAAP;AACH,qBAJD;AAMH,iBAvBD;AAyBH,aAlCM,CAAP;AAmCH;;;qCAEW;AAAA;;AAER,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT6B,KAHS,EAAd;;AAKAxB,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,QAAQ,kCAAR,CAAL;AAAA,iBAApB;;AAEAE,wBAAQK,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,wCAAP;AACH,iBAHD;AAKH,aAdM,CAAP;AAeH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n            \r\n            request.onsuccess = e =>{\r\n\r\n                resolve();\r\n\r\n            }\r\n\r\n            request.onerror = e =>{\r\n\r\n                console.log(e.target.error);\r\n                reject('Não foi poassível adicionar a negociação');\r\n            };\r\n\r\n        });\r\n    }\r\n    \r\n    listaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let cursor = this._connection\r\n                .transaction(['negociacoes'], 'readwrite')\r\n                .objectStore('negociacoes')\r\n                .openCursor();\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = e => {\r\n\r\n                let atual = e.target.result;\r\n\r\n                if(atual){\r\n\r\n                    let dado = atual.value;\r\n\r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n\r\n                    atual.continue();\r\n\r\n                } else {\r\n\r\n                    resolve(negociacoes);\r\n                }\r\n\r\n                cursor.onerror = e => {\r\n                    \r\n                    console.log(e.target.error);\r\n                    reject('Não foi possível listar as negociações;')\r\n                };\r\n\r\n            };\r\n\r\n        });\r\n    }\r\n\r\n    apagaTodos(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .clear();\r\n\r\n            request.onsuccess = e => resolve('Negociações apagadas com sucesso');\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível apagar as negociações')\r\n            };\r\n            \r\n        });\r\n    }\r\n\r\n}"]}